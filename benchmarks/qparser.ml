type token =
  | QG
  | LB
  | RB
  | LP
  | RP
  | WC
  | WN
  | EQ
  | PLS
  | CLN
  | CMA
  | H
  | Z
  | X
  | QB
  | CB
  | IN
  | OUT
  | ID of (int)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "qparser.mly"
  open Ast
# 28 "qparser.ml"
let yytransl_const = [|
  257 (* QG *);
  258 (* LB *);
  259 (* RB *);
  260 (* LP *);
  261 (* RP *);
  262 (* WC *);
  263 (* WN *);
  264 (* EQ *);
  265 (* PLS *);
  266 (* CLN *);
  267 (* CMA *);
  268 (* H *);
  269 (* Z *);
  270 (* X *);
  271 (* QB *);
  272 (* CB *);
  273 (* IN *);
  274 (* OUT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  275 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\005\000\005\000\006\000\007\000\007\000\004\000\002\000\
\008\000\009\000\009\000\010\000\011\000\011\000\012\000\012\000\
\012\000\013\000\003\000\003\000\000\000"

let yylen = "\002\000\
\004\000\001\000\001\000\003\000\001\000\003\000\003\000\003\000\
\002\000\001\000\003\000\005\000\000\000\002\000\001\000\001\000\
\001\000\009\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\020\000\
\000\000\000\000\016\000\017\000\015\000\000\000\000\000\001\000\
\002\000\003\000\004\000\006\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\018\000\000\000\
\000\000\000\000\000\000\009\000\000\000\012\000\011\000"

let yydgoto = "\002\000\
\004\000\005\000\008\000\015\000\027\000\011\000\012\000\042\000\
\043\000\035\000\036\000\022\000\009\000"

let yysindex = "\007\000\
\248\254\000\000\000\255\000\000\010\255\249\254\011\255\252\254\
\010\255\005\255\006\255\000\000\246\254\008\255\016\000\000\000\
\247\254\249\254\000\000\000\000\000\000\016\255\249\254\000\000\
\000\000\000\000\000\000\000\000\017\255\000\000\001\255\018\255\
\019\255\014\255\019\255\020\255\022\255\000\000\000\000\021\255\
\007\255\023\255\025\255\000\000\021\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\255\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\255\000\000\026\255\000\000\000\000\000\000\000\000\000\000\
\000\000\029\255\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\020\000\000\000\000\000\000\000\238\255\000\000\
\246\255\000\000\002\000\000\000\000\000"

let yytablesize = 258
let yytable = "\028\000\
\005\000\019\000\020\000\021\000\030\000\025\000\026\000\001\000\
\003\000\006\000\007\000\010\000\013\000\014\000\017\000\024\000\
\018\000\023\000\029\000\032\000\031\000\037\000\033\000\040\000\
\034\000\044\000\039\000\046\000\016\000\041\000\019\000\010\000\
\013\000\045\000\047\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000"

let yycheck = "\018\000\
\000\000\012\001\013\001\014\001\023\000\015\001\016\001\001\000\
\017\001\010\001\001\001\019\001\002\001\018\001\010\001\000\000\
\011\001\010\001\003\001\019\001\004\001\008\001\005\001\002\001\
\006\001\019\001\007\001\003\001\009\000\009\001\018\001\003\001\
\007\001\011\001\045\000\255\255\035\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001"

let yynames_const = "\
  QG\000\
  LB\000\
  RB\000\
  LP\000\
  RP\000\
  WC\000\
  WN\000\
  EQ\000\
  PLS\000\
  CLN\000\
  CMA\000\
  H\000\
  Z\000\
  X\000\
  QB\000\
  CB\000\
  IN\000\
  OUT\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'inputs) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'qgates) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'outputs) in
    Obj.repr(
# 24 "qparser.mly"
                              ( _2 )
# 203 "qparser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "qparser.mly"
       ( () )
# 209 "qparser.ml"
               : 'bit))
; (fun __caml_parser_env ->
    Obj.repr(
# 30 "qparser.mly"
       ( () )
# 215 "qparser.ml"
               : 'bit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bit) in
    Obj.repr(
# 36 "qparser.mly"
               ( (_1, _3) )
# 223 "qparser.ml"
               : 'register_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'register_decl) in
    Obj.repr(
# 41 "qparser.mly"
                  ( [ _1 ] )
# 230 "qparser.ml"
               : 'register_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'register_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'register_decls) in
    Obj.repr(
# 42 "qparser.mly"
                                     ( _1 :: _3 )
# 238 "qparser.ml"
               : 'register_decls))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'register_decls) in
    Obj.repr(
# 47 "qparser.mly"
                           ( _3 )
# 245 "qparser.ml"
               : 'outputs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'register_decls) in
    Obj.repr(
# 52 "qparser.mly"
                          ( _3 )
# 252 "qparser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 57 "qparser.mly"
           ( _2 )
# 259 "qparser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 62 "qparser.mly"
          ( [ _1 ] )
# 266 "qparser.ml"
               : 'values))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'values) in
    Obj.repr(
# 63 "qparser.mly"
                     ( _1 :: _3 )
# 274 "qparser.ml"
               : 'values))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'values) in
    Obj.repr(
# 68 "qparser.mly"
                       ( _4 )
# 281 "qparser.ml"
               : 'control))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "qparser.mly"
    ( [] )
# 287 "qparser.ml"
               : 'controls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'control) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'controls) in
    Obj.repr(
# 74 "qparser.mly"
                     ( _1 :: _2 )
# 295 "qparser.ml"
               : 'controls))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "qparser.mly"
      ( X )
# 301 "qparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "qparser.mly"
      ( H )
# 307 "qparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "qparser.mly"
      ( Z )
# 313 "qparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'controls) in
    Obj.repr(
# 86 "qparser.mly"
                                      ( (_3, _6, _8) )
# 322 "qparser.ml"
               : 'qgate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qgate) in
    Obj.repr(
# 91 "qparser.mly"
          ( [ _1 ] )
# 329 "qparser.ml"
               : 'qgates))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qgate) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qgates) in
    Obj.repr(
# 92 "qparser.mly"
                 ( _1 :: _2 )
# 337 "qparser.ml"
               : 'qgates))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
